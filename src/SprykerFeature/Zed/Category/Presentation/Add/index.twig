{% extends '@Gui/Layout/layout.twig' %}

{% if widget_title is not defined %}
    {% set widget_title = 'Category Add' %}
{% endif %}

{% if submit_title is not defined %}
    {% set submit_title = 'Add' %}
{% endif %}

{% if idCategory is not defined %}
    {% set idCategory = 0 %}
{% endif %}

{% block head_title -%}
    {{ widget_title | trans }} {% if idCategory > 0 %} : {{ idCategory }} {% endif %}
{%- endblock %}
{% block section_title %}{{ widget_title }}{% endblock %}


{% block content %}

    {% embed '@Gui/Partials/widget.twig' %}

        {% block widget_content %}

            {{ form_start(form) }}
            {{ form_widget(form) }}

            <div class="tabs-container">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#tab-1">Select products to assign</a></li>
                    <li class=""><a data-toggle="tab" href="#tab-2" id="assigned-tab-label">Products to be assigned</a></li>
                </ul>
                <div class="tab-content">
                    <div id="tab-1" class="tab-pane active">
                        <div class="panel-body">
                            {{ productsTable | raw }}

                            <div class="">
                                <a onclick="allProductsClickSelectAll();" href="javascript:void(0);" class="btn btn-primary ">Select All</a>
                            </div>
                        </div>
                    </div>
                    <div id="tab-2" class="tab-pane">
                        <div class="panel-body">
                            <h3>Selected products</h3>
                            <table class="table table-stripped table-bordered table-hover gui-table-data" id="selectedProductsTable" data-paging="false">
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>SKU</th>
                                    <th>Name</th>
                                    <th>Selected</th>
                                </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>

{#                            <div class="">
                                <a onclick="fnClearSelection();" href="javascript:void(0);" class="btn btn-primary ">Clear Selected</a>
                            </div>

                            <div class="">
                                <a onclick="fnClearSelection();" href="javascript:void(0);" class="btn btn-primary ">Clear All</a>
                            </div>#}
                        </div>
                    </div>
                </div>
            </div>

            <br/>
            <br/>

            <div class="tabs-container">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#tab-11">Products in this category</a></li>
                    <li class=""><a data-toggle="tab" href="#tab-21" id="deassigned-tab-label">Products to be deassigned</a></li>
                </ul>
                <div class="tab-content">
                    <div id="tab-11" class="tab-pane active">
                        <div class="panel-body">
                            {{ productCategoriesTable | raw }}

                            <div class="">
                                <a onclick="categoryProductClickDeSelectAll();" href="javascript:void(0);" class="btn btn-primary ">Deselect All</a>
                            </div>
                        </div>
                    </div>
                    <div id="tab-21" class="tab-pane">
                        <div class="panel-body">
                            <h3>Deselected products</h3>
                            <table class="table table-stripped table-bordered table-hover gui-table-data" id="deselectedProductsTable" data-paging="false">
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>SKU</th>
                                    <th>Name</th>
                                    <th>Selected</th>
                                </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <input type="submit" class="btn btn-primary" value="{{ submit_title | trans }}"/>
            {{ form_end(form) }}

        {% endblock %}

    {% endembed %}

{% endblock %}

{% block head_css %}
    {{ parent() }}
{% endblock %}

{% block footer_js %}
    {{ parent() }}
    <script>
        function ProductSelector() {
            var productSelector = {};
            var selectedProducts = {};
            var idKey = 'id';

            productSelector.addProductToSelection = function(idProduct) {
                selectedProducts[idProduct] = idProduct;
            };

            productSelector.removeProductFromSelection = function(idProduct) {
                delete selectedProducts[idProduct];
            };

            productSelector.isProductSelected = function(idProduct) {
                return selectedProducts.hasOwnProperty(idProduct);
            };

            productSelector.clearAllSelections = function() {
                selectedProducts = {};
            };

            productSelector.addAllToSelection = function(data) {
                for (var i = 0; i < data.length; i++) {
                    var id = data[i][idKey];
                    selectedProducts[id] = id;
                }
            };

            productSelector.getSelected = function() {
                return selectedProducts;
            };

            return productSelector;
        }


        function TableHandler(sourceTable, destinationTable, checkBoxNamePrefix, labelCaption, labelId, removeHandlerName) {
            var tableHandler = {
                checkBoxNamePrefix: checkBoxNamePrefix,
                labelId: labelId,
                labelCaption: labelCaption,
                removeHandlerName: removeHandlerName,
            };
            
            var destinationTableProductSelector = new ProductSelector();

            tableHandler.selectAll = function() {
                var nodes = sourceTable.dataTable().fnGetNodes();
                $('input[type="checkbox"]', nodes).prop('checked', true);
                
                var sourceTableData = sourceTable.DataTable().rows().data();
                sourceTableData.each(function (cellData, index) {
                    tableHandler.addSelectedProduct(cellData[0], cellData[1], cellData[2]);
                });
            };

            tableHandler.deSelectAll = function() {
                var nodes = sourceTable.dataTable().fnGetNodes();
                $('input[type="checkbox"]', nodes).prop('checked', false);

                var sourceTableData = sourceTable.DataTable().rows().data();
                sourceTableData.each(function (cellData, index) {
                    tableHandler.removeSelectedProduct(cellData[0]);
                });
            };

            tableHandler.addSelectedProduct = function(idProduct, sku, name) {
                if (destinationTableProductSelector.isProductSelected(idProduct)) {
                    return;
                }
                destinationTableProductSelector.addProductToSelection(idProduct);

                destinationTable.dataTable().fnAddData([
                    idProduct,
                    decodeURIComponent((sku+'').replace(/\+/g, '%20')),
                    decodeURIComponent((name+'').replace(/\+/g, '%20')),
                    '<div class=""><a onclick="' + tableHandler.getRemoveHandlerName() + '(this, '+idProduct+'); return false" href="javascript:void(0);" class="btn btn-xs ">Remove</a></div>'
                ]);

                tableHandler.updateSelectedProductsLabelCount();
            };

            tableHandler.removeSelectedProduct = function(idProduct) {
                var selectedProductsData = destinationTable.DataTable().rows().data();
                selectedProductsData.each(function (cellData, index) {
                    var currentId = cellData[0];

                    if (parseInt(currentId) == parseInt(idProduct)) {
                        destinationTableProductSelector.removeProductFromSelection(idProduct);
                        destinationTable.dataTable().fnDeleteRow(index);
                        $('#' + tableHandler.getCheckBoxNamePrefix() + idProduct).prop('checked', false);
                        tableHandler.updateSelectedProductsLabelCount();
                    }
                });
            };
            
            tableHandler.getSelector = function() {
                return destinationTableProductSelector; 
            };

            tableHandler.updateSelectedProductsLabelCount = function() {
                $('#' + tableHandler.getLabelId()).text(labelCaption + ' (' + Object.keys(this.getSelector().getSelected()).length + ')');
            }
            
            tableHandler.getCheckBoxNamePrefix = function() {
                return tableHandler.checkBoxNamePrefix;
            }

            tableHandler.getLabelId = function() {
                return tableHandler.labelId;
            }

            tableHandler.getRemoveHandlerName = function() {
                return tableHandler.removeHandlerName;
            }

            tableHandler.getLabelCaption = function() {
                return tableHandler.labelCaption;
            }

            return tableHandler;
        }

        //all products table
        function allProductsClickSelectAll() {
            allProductsTable.selectAll();
        }

        function allProductsClickMarkAsSelected(checked, idProduct, sku, name) {
            if (checked) {
                allProductsTable.addSelectedProduct(idProduct, sku, name);
            }
            else {
                allProductsTable.removeSelectedProduct(idProduct);
            }
        }
        
        function selectedProductClickRemoveSelected(btn, idProduct) {
            var table = $('#selectedProductsTable').DataTable();
                table.row( $(btn).parents('tr') )
                    .remove()
                    .draw();

            allProductsTable.getSelector().removeProductFromSelection(idProduct);
            allProductsTable.updateSelectedProductsLabelCount();
            $('#' + allProductsTable.getCheckBoxNamePrefix() + idProduct).prop('checked', false);
        }

        
        //prodcut category table
        function categoryProductClickDeSelectAll() {
            productCategoryTable.deSelectAll();
        }
        
        function categoryTableClickMarkAsSelected(checked, idProduct, sku, name) {
            if (checked) {
                productCategoryTable.addSelectedProduct(idProduct, sku, name);
            }
            else {
                productCategoryTable.removeSelectedProduct(idProduct);   
            }
        }

        function categoryTableClickRemoveSelected(btn, idProduct) {
            var table = $('#deselectedProductsTable').DataTable();
                table.row( $(btn).parents('tr') )
                    .remove()
                    .draw();

            productCategoryTable.getSelector().removeProductFromSelection(idProduct);
            productCategoryTable.updateSelectedProductsLabelCount();
            $('#' + productCategoryTable.getCheckBoxNamePrefix() + idProduct).prop('checked', true);
        }

        $(document).ready(function () {
            allProductsTable = new TableHandler($('#product-table'), $('#selectedProductsTable'), 'all_products_checkbox_', 'Products to be assigned', 'assigned-tab-label', 'selectedProductClickRemoveSelected');
            
            $('#product-table').dataTable({
                destroy: true,
                fnDrawCallback: function(settings) {
                    //this.fnDraw(false);
                    for (var i=0; i<settings.json.data.length; i++) {
                        var product = settings.json.data[i];
                        var idProduct = parseInt(product[0]);

                        var selector = allProductsTable.getSelector();
                        if (selector.isProductSelected(idProduct)) {
                            $('#' + allProductsTable.getCheckBoxNamePrefix() +idProduct).prop('checked', true);
                        }
                    }
                }
            });

            productCategoryTable = new TableHandler($('#product-category-table'), $('#deselectedProductsTable'), 'product_category_checkbox_', 'Products to be deassigned', 'deassigned-tab-label', 'categoryTableClickRemoveSelected');
/*            $('#product-category-table').dataTable({
                destroy: true,
                fnDrawCallback: function(settings) {
                    //this.fnDraw(false);
                    for (var i=0; i<settings.json.data.length; i++) {
                        var product = settings.json.data[i];
                        var idProduct = parseInt(product[0]);

                        var selector = productCategoryTable.getSelector();
                        if (selector.isProductSelected(idProduct)) {
                            $('#' + productCategoryTable.getCheckBoxNamePrefix() +idProduct).prop('checked', true);
                        }
                    }
                }
            });*/
            


            //parent
            $('.spryker-form-select2combobox').select2();

        });
    </script>
{% endblock %}
