{% extends '@Gui/Layout/layout.twig' %}

{% if widget_title is not defined %}
    {% set widget_title = 'Category Add' %}
{% endif %}

{% if submit_title is not defined %}
    {% set submit_title = 'Add' %}
{% endif %}

{% if idCategory is not defined %}
    {% set idCategory = 0 %}
{% endif %}

{% block head_title -%}
    {{ widget_title | trans }} {% if idCategory > 0 %} : {{ idCategory }} {% endif %}
{%- endblock %}
{% block section_title %}{{ widget_title }}{% endblock %}


{% block content %}

    {% embed '@Gui/Partials/widget.twig' %}

        {% block widget_content %}

            {{ form_start(form) }}
            {{ form_widget(form) }}

            <div class="tabs-container">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#tab-1">Select products to assign</a></li>
                    <li class=""><a data-toggle="tab" href="#tab-2" id="assigned-tab-label">Products to be assigned</a></li>
                </ul>
                <div class="tab-content">
                    <div id="tab-1" class="tab-pane active">
                        <div class="panel-body">
                            {{ productsTable | raw }}

                            <div class="">
                                <a onclick="allProductsClickSelectAll();" href="javascript:void(0);" class="btn btn-primary ">Select All</a>
                            </div>
                        </div>
                    </div>
                    <div id="tab-2" class="tab-pane">
                        <div class="panel-body">
                            <h3>Selected products</h3>
                            <table class="table table-stripped table-bordered table-hover gui-table-data" id="selectedProductsTable" data-paging="false">
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>SKU</th>
                                    <th>Name</th>
                                    <th>Selected</th>
                                </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>

                            <div class="">
                                <a onclick="fnClearSelection();" href="javascript:void(0);" class="btn btn-primary ">Clear Selected</a>
                            </div>

                            <div class="">
                                <a onclick="fnClearSelection();" href="javascript:void(0);" class="btn btn-primary ">Clear All</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br/>
            <br/>

            <h3>Products in this category</h3>
            {{ productCategoriesTable | raw }}

            <input type="submit" class="btn btn-primary" value="{{ submit_title | trans }}"/>
            {{ form_end(form) }}

        {% endblock %}

    {% endembed %}

{% endblock %}

{% block head_css %}
    {{ parent() }}
{% endblock %}

{% block footer_js %}
    {{ parent() }}
    <script>
        function ProductSelector() {
            var productSelector = {};
            var selectedProducts = {};
            var idKey = 'id';

            productSelector.addProductToSelection = function(idProduct) {
                selectedProducts[idProduct] = idProduct;
            };

            productSelector.removeProductFromSelection = function(idProduct) {
                delete selectedProducts[idProduct];
            };

            productSelector.isProductSelected = function(idProduct) {
                return selectedProducts.hasOwnProperty(idProduct);
            };

            productSelector.clearAllSelections = function() {
                selectedProducts = {};
            };

            productSelector.addAllToSelection = function(data) {
                for (var i = 0; i < data.length; i++) {
                    var id = data[i][idKey];
                    selectedProducts[id] = id;
                }
            };

            productSelector.getSelected = function() {
                return selectedProducts;
            };

            return productSelector;
        }


        function TableHandler() {
            var allProductsTableHandler = {};
            var selectedProductSelector = new ProductSelector();
            var selectedProductsTable = $('#selectedProductsTable');
            var allProductsTable = $('#product-table');

            allProductsTableHandler.selectAll = function() {
                var nodes = allProductsTable.dataTable().fnGetNodes();
                $('input[type="checkbox"]', nodes).prop('checked', true);
                
                var allProductsData = allProductsTable.DataTable().rows().data();
                allProductsData.each(function (cellData, index) {
                    allProductsTableHandler.addSelectedProduct(cellData[0], cellData[1], cellData[2]);
                });
            };

            allProductsTableHandler.addSelectedProduct = function(idProduct, sku, name) {
                if (selectedProductSelector.isProductSelected(idProduct)) {
                    return;
                }
                selectedProductSelector.addProductToSelection(idProduct);

                selectedProductsTable.dataTable().fnAddData([
                    idProduct,
                    decodeURIComponent((sku+'').replace(/\+/g, '%20')),
                    decodeURIComponent((name+'').replace(/\+/g, '%20')),
                    '<div class=""><a onclick="selectedProductClickRemoveSelected(this, '+idProduct+'); return false" href="javascript:void(0);" class="btn btn-xs ">Remove</a></div>'
                ]);

                this.updateSelectedProductsLabelCount();
            };

            allProductsTableHandler.removeSelectedProduct = function(idProduct) {
                var selectedProductsData = selectedProductsTable.DataTable().rows().data();
                selectedProductsData.each(function (cellData, index) {
                    var currentId = cellData[0];

                    if (parseInt(currentId) == parseInt(idProduct)) {
                        selectedProductSelector.removeProductFromSelection(idProduct);
                        selectedProductsTable.dataTable().fnDeleteRow(index);
                        $('#all_products_checkbox_'+idProduct).prop('checked', false);
                        this.updateSelectedProductsLabelCount();
                    }
                });
            };
            
            allProductsTableHandler.getSelection = function() {
                return selectedProductSelector; 
            };

            allProductsTableHandler.updateSelectedProductsLabelCount = function() {
                $('#assigned-tab-label').text('Products to be assigned (' + Object.keys(this.getSelection().getSelected()).length + ')');
            }
            

            return allProductsTableHandler;
        }

        function allProductsClickSelectAll() {
            allProductsTable.selectAll();
        }

        function allProductsClickMarkAsSelected(checked, idProduct, sku, name) {
            if (checked) {
                allProductsTable.addSelectedProduct(idProduct, sku, name);
            }
            else {
                allProductsTable.removeSelectedProduct(idProduct);
            }
        }
        
        function selectedProductClickRemoveSelected(btn, idProduct) {
            var table = $('#selectedProductsTable').DataTable();
                table.row( $(btn).parents('tr') )
                    .remove()
                    .draw();

            allProductsTable.getSelection().removeProductFromSelection(idProduct);
            allProductsTable.updateSelectedProductsLabelCount();
            $('#all_products_checkbox_'+idProduct).prop('checked', false);
        }

        $(document).ready(function () {

            allProductsTable = new TableHandler();

            $('#product-table').dataTable({
                destroy: true,
                fnDrawCallback: function(settings) {
                    //this.fnDraw(false);
                    for (var i=0; i<settings.json.data.length; i++) {
                        var product = settings.json.data[i];
                        var idProduct = parseInt(product[0]);
                        //console.log('settings.json.data', idProduct, product);

                        var selector = allProductsTable.getSelection();
                        console.log('selectedData', selector);
                        if (selector.isProductSelected(idProduct)) {
                            $('#all_products_checkbox_'+idProduct).prop('checked', true);
                        }
                    }
                }
            });
            


            //parent
            $('.spryker-form-select2combobox').select2();

        });
    </script>
{% endblock %}
